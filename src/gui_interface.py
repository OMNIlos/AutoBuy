import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import threading
import time
from selenium import webdriver
from src.gift_logic import GiftBuyer
import queue
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.common.exceptions import TimeoutException
from src.auth import TelegramWebNavigator
from src.config import load_config, save_config
from src.notifier import send_telegram_notification
import requests
import numpy as np
from PIL import ImageDraw
from PIL import Image, ImageTk
import os

class GiftBotGUI:
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Gift buyer bot")
        self.root.geometry("800x700")
        
        self.bg_main = '#1a0826'  
        self.bg_panel = '#2d1040' 
        self.bg_frame = '#3a1760' 
        self.fg_text = '#e0d6ff'  
        self.fg_accent = '#a259ff' 
        self.fg_status = '#c084fc' 
        self.root.configure(bg=self.bg_main)
        
        self.price_threshold = tk.StringVar(value="50")
        self.min_price_filter = tk.IntVar(value=100)
        self.gift_elem_number_filter = tk.IntVar(value=13) 
        self.use_absolute_threshold = tk.BooleanVar(value=False)
        self.absolute_threshold = tk.StringVar(value="100")
        self.is_running = False
        self.user_confirmed = False
        self.stop_thread = threading.Event()
        self.driver = None
        self.stage = 'idle' 
        
        self.log_queue = queue.Queue()
        
        self.chat_id_var = tk.StringVar()
        self.chat_id_status_var = tk.StringVar()
        self.load_chat_id_from_config()
        
        self.setup_styles()
        
        self.setup_ui()
        
        self.update_logs()
        self.update_buttons_state()
        
    def setup_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        style = ttk.Style()
        style.theme_use('alt')
        
        style.configure('Title.TLabel', font=('Arial', 18, 'bold'), foreground=self.fg_accent, background=self.bg_main)
        style.configure('Header.TLabel', font=('Arial', 12, 'bold'), foreground=self.fg_accent, background=self.bg_panel)
        style.configure('Status.TLabel', font=('Arial', 10), foreground=self.fg_status, background=self.bg_frame)
        style.configure('Error.TLabel', font=('Arial', 10), foreground='#ff4b8e', background=self.bg_frame)
        style.configure('TLabel', background=self.bg_panel, foreground=self.fg_text)
        style.configure('TFrame', background=self.bg_panel)
        style.configure('TButton', font=('Arial', 10, 'bold'), background=self.fg_accent, foreground=self.bg_main)
        style.configure('Start.TButton', font=('Arial', 10, 'bold'), background=self.fg_accent, foreground=self.bg_main)
        style.configure('Stop.TButton', font=('Arial', 10, 'bold'), background='#ff4b8e', foreground=self.bg_main)
        style.configure('Continue.TButton', font=('Arial', 10, 'bold'), background='#7c3aed', foreground=self.bg_main)
        style.map('TButton', background=[('active', self.fg_status)])
        
    def setup_ui(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        logo_path = os.path.join(os.path.dirname(__file__), '..', 'templates', 'gift_logo.png')
        logo_img = None
        if os.path.exists(logo_path):
            try:
                pil_img = Image.open(logo_path).resize((90, 90)).convert('RGBA')
                
                size = pil_img.size
                mask = Image.new('L', size, 0)
                draw = Image.new('L', size, 0)
                ImageDraw.Draw(mask).ellipse((0, 0) + size, fill=255)
                pil_img.putalpha(mask)
                logo_img = ImageTk.PhotoImage(pil_img)
                logo_label = tk.Label(self.root, image=logo_img, bg=self.bg_main, bd=0, highlightthickness=0)
                logo_label.pack(pady=(18, 2))
                self.logo_img = logo_img
            except Exception:
                tk.Label(self.root, text="üéÅ", font=("Arial", 44), bg=self.bg_main, fg=self.fg_accent).pack(pady=(18, 2))
        else:
            tk.Label(self.root, text="üéÅ", font=("Arial", 44), bg=self.bg_main, fg=self.fg_accent).pack(pady=(18, 2))
            tk.Label(self.root, text="–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª gift_logo.png –≤ –ø–∞–ø–∫—É templates/ –¥–ª—è —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞", font=("Arial", 8), bg=self.bg_main, fg=self.fg_status).pack()
       
        title_label = ttk.Label(
            self.root, 
            text="AutoBuy bot", 
            style='Title.TLabel'
        )
        title_label.pack(pady=(2, 18))
        
        main_frame = ttk.Frame(self.root, style='TFrame')
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
       
        left_frame = tk.LabelFrame(main_frame, text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", padx=15, pady=10, bg=self.bg_panel, fg=self.fg_accent, font=("Arial", 12, "bold"), relief=tk.GROOVE, bd=2)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        chatid_frame = tk.LabelFrame(left_frame, text="üí¨ Telegram Chat ID", padx=10, pady=8, bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 11, "bold"), relief=tk.GROOVE, bd=2)
        chatid_frame.pack(fill=tk.X, pady=(0, 10))
        tk.Label(chatid_frame, text="Chat ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:", bg=self.bg_frame, fg=self.fg_text, font=("Arial", 10)).pack(anchor=tk.W)
        chatid_entry = tk.Entry(chatid_frame, textvariable=self.chat_id_var, width=30, bg=self.bg_panel, fg=self.fg_accent, insertbackground=self.fg_accent, relief=tk.FLAT)
        chatid_entry.pack(fill=tk.X, padx=(0, 0), pady=(2, 6))
        btns_frame = tk.Frame(chatid_frame, bg=self.bg_frame)
        btns_frame.pack(fill=tk.X, pady=(0, 6))
        save_btn = tk.Button(btns_frame, text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=self.save_chat_id_to_config, width=16, bg=self.fg_accent, fg=self.bg_main, font=("Arial", 10, "bold"), relief=tk.RAISED, bd=1, activebackground=self.fg_status)
        save_btn.pack(side=tk.LEFT, padx=(0, 5))
        get_btn = tk.Button(btns_frame, text="–ü–æ–ª—É—á–∏—Ç—å –º–æ–π Chat ID", command=lambda: threading.Thread(target=self.get_chat_id_from_telegram, daemon=True).start(), width=20, bg=self.fg_accent, fg=self.bg_main, font=("Arial", 10, "bold"), relief=tk.RAISED, bd=1, activebackground=self.fg_status)
        get_btn.pack(side=tk.LEFT)
        status_label = tk.Label(chatid_frame, textvariable=self.chat_id_status_var, font=("Arial", 9), fg=self.fg_status, bg=self.bg_frame)
        status_label.pack(anchor=tk.W, pady=(2, 0))
       
        button_frame = tk.Frame(left_frame, bg=self.bg_panel)
        button_frame.pack(fill=tk.X, pady=20)
        self.start_button = tk.Button(
            button_frame,
            text="‚ñ∂ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É",
            command=self.start_bot,
            bg=self.fg_accent, fg=self.bg_main, font=("Arial", 10, "bold"), width=20, relief=tk.RAISED, bd=1, activebackground=self.fg_status
        )
        self.start_button.pack(side=tk.LEFT, padx=(0, 10))
        self.stop_button = tk.Button(
            button_frame,
            text="‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            command=self.stop_bot,
            bg="#ff4b8e", fg=self.bg_main, font=("Arial", 10, "bold"), width=20, relief=tk.RAISED, bd=1, activebackground=self.fg_status, state=tk.DISABLED
        )
        self.stop_button.pack(side=tk.LEFT, padx=(0, 10))
        self.restart_browser_button = tk.Button(
            button_frame,
            text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±—Ä–∞—É–∑–µ—Ä",
            command=self.restart_browser,
            bg="#7c3aed", fg=self.bg_main, font=("Arial", 10, "bold"), width=22, relief=tk.RAISED, bd=1, activebackground=self.fg_status, state=tk.DISABLED
        )
        self.restart_browser_button.pack(side=tk.LEFT, padx=(0, 10))
        self.continue_button = tk.Button(
            button_frame,
            text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
            command=self.confirm_ready,
            bg="#7c3aed", fg=self.bg_main, font=("Arial", 10, "bold"), width=20, relief=tk.RAISED, bd=1, activebackground=self.fg_status, state=tk.DISABLED
        )
        self.continue_button.pack(side=tk.LEFT)
       
        filter_frame = tk.LabelFrame(left_frame, text="üí∏ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ—Ä–æ–≥", padx=10, pady=8, bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 11, "bold"), relief=tk.GROOVE, bd=2)
        filter_frame.pack(fill=tk.X, pady=(0, 10))
       
        percent_row = tk.Frame(filter_frame, bg=self.bg_frame)
        percent_row.pack(fill=tk.X, pady=(2, 0))
        tk.Label(percent_row, text="–ü–æ—Ä–æ–≥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ:", bg=self.bg_frame, fg=self.fg_text, font=("Arial", 10)).pack(side=tk.LEFT)
        percent_entry = tk.Entry(percent_row, textvariable=self.price_threshold, width=8, bg=self.bg_panel, fg=self.fg_accent, insertbackground=self.fg_accent, relief=tk.FLAT)
        percent_entry.pack(side=tk.LEFT, padx=(8, 0))
        tk.Label(percent_row, text="%", bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 10)).pack(side=tk.LEFT, padx=(2, 0))
       
        min_row = tk.Frame(filter_frame, bg=self.bg_frame)
        min_row.pack(fill=tk.X, pady=(8, 0))
        tk.Label(min_row, text="–ú–∏–Ω. —Ü–µ–Ω–∞ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:", bg=self.bg_frame, fg=self.fg_text, font=("Arial", 10)).pack(side=tk.LEFT)
        min_price_entry = tk.Entry(min_row, textvariable=self.min_price_filter, width=10, bg=self.bg_panel, fg=self.fg_accent, insertbackground=self.fg_accent, relief=tk.FLAT)
        min_price_entry.pack(side=tk.LEFT, padx=(8, 0))
        tk.Label(min_row, text="‚≠ê", bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 10)).pack(side=tk.LEFT, padx=(2, 0))
       
        index_row = tk.Frame(filter_frame, bg=self.bg_frame)
        index_row.pack(fill=tk.X, pady=(8, 0))
        tk.Label(index_row, text="–ò–Ω–¥–µ–∫—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞:", bg=self.bg_frame, fg=self.fg_text, font=("Arial", 10)).pack(side=tk.LEFT)
        gift_elem_entry = tk.Entry(index_row, textvariable=self.gift_elem_number_filter, width=8, bg=self.bg_panel, fg=self.fg_accent, insertbackground=self.fg_accent, relief=tk.FLAT)
        gift_elem_entry.pack(side=tk.LEFT, padx=(8, 0))
      
        abs_row = tk.Frame(filter_frame, bg=self.bg_frame)
        abs_row.pack(fill=tk.X, pady=(10, 0))
        absolute_check = tk.Checkbutton(
            abs_row,
            text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ",
            variable=self.use_absolute_threshold,
            command=self.toggle_threshold_type,
            bg=self.bg_frame, fg=self.fg_text, font=("Arial", 10), selectcolor=self.bg_panel, activebackground=self.bg_frame
        )
        absolute_check.pack(side=tk.LEFT)
       
        abs_val_row = tk.Frame(filter_frame, bg=self.bg_frame)
        abs_val_row.pack(fill=tk.X, pady=(4, 0), padx=(24, 0))
        tk.Label(abs_val_row, text="–ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (–≤ –∑–≤–µ–∑–¥–∞—Ö):", bg=self.bg_frame, fg=self.fg_text, font=("Arial", 8)).pack(side=tk.LEFT)
        self.absolute_entry = tk.Entry(
            abs_val_row,
            textvariable=self.absolute_threshold,
            font=("Arial", 10),
            width=10,
            state=tk.DISABLED,
            bg=self.bg_panel, fg=self.fg_accent, insertbackground=self.fg_accent, relief=tk.FLAT
        )
        self.absolute_entry.pack(side=tk.LEFT, padx=(8, 0))
        tk.Label(abs_val_row, text="‚≠ê", font=("Arial", 12), bg=self.bg_frame, fg=self.fg_accent).pack(side=tk.LEFT, padx=(2, 0))
       
        status_frame = tk.LabelFrame(left_frame, text="üìä –°—Ç–∞—Ç—É—Å", padx=10, pady=8, bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 11, "bold"), relief=tk.GROOVE, bd=2)
        status_frame.pack(fill=tk.X, pady=(0, 10))
        self.status_label = tk.Label(
            status_frame, 
            text="üü† –û–∂–∏–¥–∞–Ω–∏–µ", 
            font=("Arial", 10),
            fg=self.fg_status,
            bg=self.bg_frame
        )
        self.status_label.pack()
       
        info_frame = tk.LabelFrame(left_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", padx=10, pady=8, bg=self.bg_frame, fg=self.fg_accent, font=("Arial", 11, "bold"), relief=tk.GROOVE, bd=2)
        info_frame.pack(fill=tk.BOTH, pady=(0, 10), expand=True)
        info_text = """
‚Ä¢ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â–µ—Ç –≤—ã–≥–æ–¥–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏
‚Ä¢ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram chat_id:
  1. –û—Ç–∫—Ä–æ–π—Ç–µ —á–∞—Ç —Å –≤–∞—à–∏–º Telegram-–±–æ—Ç–æ–º (—Å—Å—ã–ª–∫–∞ –Ω–∞ –±–æ—Ç–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
  2. –ù–∞–∂–º–∏—Ç–µ Start/–ó–∞–ø—É—Å—Ç–∏—Ç—å
  3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_chat_id
  4. –ë–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –≤–∞—à chat_id ‚Äî —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø–æ–ª–µ –≤—ã—à–µ
‚Ä¢ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–º–µ–Ω–Ω–æ –Ω–∞ —Å–≤–æ–π Telegram
‚Ä¢ –ö–Ω–æ–ø–∫–∞ "–ü–æ–ª—É—á–∏—Ç—å –º–æ–π Chat ID" —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å polling-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º (—Å–º. README)
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
‚Ä¢ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤ Telegram Web –∏ –¥–æ–π–¥–∏—Ç–µ –¥–æ –º–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤
‚Ä¢ –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: –æ—Ç 0% –¥–æ 100% (–º–æ–∂–Ω–æ –¥—Ä–æ–±–Ω—ã–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä 0.5%)
‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≤ –∑–≤–µ–∑–¥–∞—Ö –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100‚≠ê)
‚Ä¢ –ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞: –∏–Ω–¥–µ–∫—Å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–¥–∞—Ä–∫–æ–≤ (0, 1, 2, ...)
‚Ä¢ –õ–æ–≥–∏ —Å —Ü–≤–µ—Ç–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –ï—Å–ª–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è QR –∫–æ–¥ –±–µ–∑ –ª–æ–≥–æ—Ç–∏–ø–∞ Telegram, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –µ–≥–æ –∑–∞–Ω–æ–≤–æ
        """
        info_text_widget = tk.Text(info_frame, wrap=tk.WORD, height=12, bg=self.bg_frame, fg=self.fg_text, font=("Arial", 9), relief=tk.FLAT, bd=0)
        info_text_widget.insert(tk.END, info_text)
        info_text_widget.config(state=tk.DISABLED)
        info_text_widget.pack(fill=tk.BOTH, expand=True)
       
        info_scroll = tk.Scrollbar(info_frame, command=info_text_widget.yview)
        info_text_widget.config(yscrollcommand=info_scroll.set)
        info_scroll.pack(side=tk.RIGHT, fill=tk.Y)
        
       
        right_frame = ttk.LabelFrame(main_frame, text="üìù –õ–æ–≥–∏ —Ä–∞–±–æ—Ç—ã", padding=15, style='TFrame')
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(10, 0))
        
       
        self.log_area = scrolledtext.ScrolledText(
            right_frame,
            wrap=tk.WORD,
            width=60,
            height=12,
            font=('Consolas', 9),
            bg=self.bg_frame,
            fg=self.fg_text,
            insertbackground=self.fg_text
        )
        self.log_area.pack(fill=tk.BOTH, expand=True)
        
       
        ttk.Button(
            right_frame,
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏",
            command=self.clear_logs,
            width=15
        ).pack(pady=(10, 0))
        
        self.update_logs()
        
    def log_message(self, message, level="INFO"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥ —Å —É—Ä–æ–≤–Ω–µ–º –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        timestamp = time.strftime("%H:%M:%S")
        
        level_icons = {
            "INFO": "‚ÑπÔ∏è",
            "SUCCESS": "‚úÖ", 
            "WARNING": "‚ö†Ô∏è",
            "ERROR": "‚ùå",
            "DEBUG": "üîç",
            "START": "üöÄ",
            "STOP": "‚èπÔ∏è",
            "BROWSER": "üåê",
            "GIFT": "üéÅ",
            "MONEY": "üí∞"
        }
        
        icon = level_icons.get(level, "‚ÑπÔ∏è")
        log_entry = f"[{timestamp}] {icon} {message}\n"
        self.log_queue.put(log_entry)
        
    def update_logs(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–≤"""
        try:
            while True:
                log_entry = self.log_queue.get_nowait()
                self.log_area.insert(tk.END, log_entry)
                self.log_area.see(tk.END)
        except queue.Empty:
            pass
        
        self.root.after(100, self.update_logs)
        
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—Å—Ç–∏ –ª–æ–≥–æ–≤"""
        self.log_area.delete(1.0, tk.END)
        
    def reset_ui(self):
        """–°–±—Ä–æ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é"""
        self.is_running = False
        self.stage = 'idle'
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.DISABLED)
        self.continue_button.config(state=tk.DISABLED)
        self.status_label.config(text="üü† –û–∂–∏–¥–∞–Ω–∏–µ")
        self.update_buttons_state()
        self.log_message("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å–±—Ä–æ—à–µ–Ω –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é", "INFO")
        
    def confirm_ready(self):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.stage == 'automation' and self.is_running:
            self.user_confirmed = True
            self.continue_button.config(state=tk.DISABLED)
            self.log_message("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å!", "SUCCESS")
        else:
            self.log_message("–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏", "WARNING")
        
    def wait_for_user_confirmation(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_confirmed = False
        self.continue_button.config(state=tk.NORMAL)
        self.log_message("–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", "INFO")
        
        while not self.user_confirmed and not self.stop_thread.is_set():
            time.sleep(0.1) 
            
        if self.stop_thread.is_set():
            raise Exception("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        
        self.user_confirmed = False
        
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        if self.is_running:
            return
            
        try:
            self.log_message("–ó–∞–ø—É—Å–∫ Telegram Gift Bot...", "START")
            self.status_label.config(text="üü° –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
            
            self.stop_thread.clear()
            self.user_confirmed = False
            
            threshold = float(self.price_threshold.get())
            min_price = self.min_price_filter.get()
            gift_elem_number = self.gift_elem_number_filter.get()
            use_absolute = self.use_absolute_threshold.get()
            absolute_threshold = float(self.absolute_threshold.get()) if use_absolute else 0

            gift_selector = 'div.G1mBmzxs.f5ArEO1S.starGiftItem'
            chat_id = self.chat_id_var.get().strip() or None
            
            self.log_message("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:", "INFO")
            if use_absolute:
                self.log_message(f"   ‚Ä¢ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: {absolute_threshold}‚≠ê –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "MONEY")
            else:
                self.log_message(f"   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–π –ø–æ—Ä–æ–≥: {threshold}% –Ω–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ", "MONEY")
            self.log_message(f"   ‚Ä¢ –ú–∏–Ω. —Ü–µ–Ω–∞: {min_price}‚≠ê", "MONEY")
            self.log_message(f"   ‚Ä¢ –ù–æ–º–µ—Ä –ø–æ–¥–∞—Ä–∫–∞: {gift_elem_number}", "GIFT")
            self.log_message(f"   ‚Ä¢ –°–µ–ª–µ–∫—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–∞: {gift_selector}", "DEBUG")
            if chat_id:
                self.log_message(f"   ‚Ä¢ Chat ID: {chat_id}", "INFO")
            
            if self.driver:
                try:
                    self.driver.quit()
                except Exception:
                    pass
            self.driver = webdriver.Firefox()
            self.driver.maximize_window()
            self.driver.get('https://web.telegram.org')
            
            self.bot_thread = threading.Thread(target=self.run_bot, args=(threshold, gift_elem_number, min_price, gift_selector, use_absolute, absolute_threshold, chat_id))
            self.bot_thread.daemon = True
            self.bot_thread.start()
            
            self.is_running = True
            self.stage = 'automation'
            self.update_buttons_state()
            self.status_label.config(text="üü¢ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω")
            
            self.log_message("–ë—Ä–∞—É–∑–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—É—â–µ–Ω!", "BROWSER")
            self.log_message("–û—Ç–∫—Ä–æ–π—Ç–µ Telegram Web, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –¥–æ–π–¥–∏—Ç–µ –¥–æ –º–µ–Ω—é —Å —Ç–∏–ø–∞–º–∏ –ø–æ–¥–∞—Ä–∫–æ–≤, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", "INFO")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}", "ERROR")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞:\n{e}")
            self.status_label.config(text="üü† –û–∂–∏–¥–∞–Ω–∏–µ")
            self.stage = 'idle'
            self.update_buttons_state()
            
    def run_bot(self, threshold, gift_elem_number, min_price, gift_selector, use_absolute, absolute_threshold, chat_id):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
        try:
            driver = self.driver
            self.log_message("–û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...", "INFO")
            self.log_message("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –≤—Ä—É—á–Ω—É—é –¥–æ–π–¥–∏—Ç–µ –¥–æ –º–µ–Ω—é —Å —Ç–∏–ø–∞–º–∏ –ø–æ–¥–∞—Ä–∫–æ–≤", "INFO")
            self.wait_for_user_confirmation()
            self.log_message("–ú–µ–Ω—é –ø–æ–¥–∞—Ä–∫–æ–≤ –æ—Ç–∫—Ä—ã—Ç–æ! –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏...", "GIFT")
            buyer = GiftBuyer(driver, threshold, gift_elem_number, min_price, self.log_message, stop_event=self.stop_thread, gift_selector=gift_selector, use_absolute=use_absolute, absolute_threshold=absolute_threshold, chat_id=chat_id)
            buyer.buy_gift_if_profitable()
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}", "ERROR")
            self.log_message("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", "WARNING")
        finally:
            if not self.is_running:
                if self.driver:
                    try:
                        self.log_message("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...", "BROWSER")
                        self.driver.quit()
                    except:
                        pass
                    self.driver = None
                self.root.after(0, self.reset_ui)
            
    def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not self.is_running:
            self.log_message("–ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "WARNING")
            return "Success"
            
        self.log_message("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...", "STOP")
        
        self.stop_thread.set()
        
        if hasattr(self, 'bot_thread') and self.bot_thread.is_alive():
            self.log_message("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –±–æ—Ç–∞...", "INFO")
            self.bot_thread.join(timeout=5)  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 5 —Å–µ–∫—É–Ω–¥
            if self.bot_thread.is_alive():
                self.log_message("–ü–æ—Ç–æ–∫ –±–æ—Ç–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –∑–∞ 5 —Å–µ–∫—É–Ω–¥", "WARNING")
        
        self.is_running = False
        self.stage = 'idle'
        
        if self.driver:
            try:
                self.log_message("–ó–∞–∫—Ä—ã—Ç–∏–µ –±—Ä–∞—É–∑–µ—Ä–∞...", "BROWSER")
                self.driver.quit()
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}", "ERROR")
            finally:
                self.driver = None
        
        self.update_buttons_state()
        self.status_label.config(text="üü† –û–∂–∏–¥–∞–Ω–∏–µ")
        self.log_message("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "SUCCESS")
        
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        if self.is_running:
            if messagebox.askokcancel("–í—ã—Ö–æ–¥", "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –≤—ã–π—Ç–∏?"):
                self.stop_bot()
                self.root.destroy()
        else:
            self.root.destroy()
            
    def run(self):
        """–ó–∞–ø—É—Å–∫ GUI"""
        self.root.protocol("WM_DELETE_WINDOW", self.on_closing)
        self.root.mainloop()

    def toggle_threshold_type(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–º –∏ –∞–±—Å–æ–ª—é—Ç–Ω—ã–º –ø–æ—Ä–æ–≥–æ–º"""
        if self.use_absolute_threshold.get():
            self.absolute_entry.config(state=tk.NORMAL)
        else:
            self.absolute_entry.config(state=tk.DISABLED)
    
    def update_buttons_state(self):
        if self.stage == 'idle':
            self.start_button.config(state=tk.NORMAL)
            self.stop_button.config(state=tk.DISABLED)
            self.continue_button.config(state=tk.DISABLED)
        elif self.stage == 'automation':
            self.start_button.config(state=tk.DISABLED)
            self.stop_button.config(state=tk.NORMAL)
            self.continue_button.config(state=tk.NORMAL)
        
        self.restart_browser_button.config(state=tk.NORMAL if self.driver else tk.DISABLED)



    def restart_browser(self):
        if not self.driver:
            self.log_message("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω: –±—Ä–∞—É–∑–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω", "WARNING")
            return
        if self.is_running and self.stage == 'automation':
            self.log_message("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞...", "INFO")
            self.stop_thread.set()
            if hasattr(self, 'bot_thread') and self.bot_thread.is_alive():
                self.bot_thread.join(timeout=10)
            try:
                self.driver.quit()
            except Exception:
                pass
            self.driver = webdriver.Firefox()
            self.driver.maximize_window()
            self.driver.get('https://web.telegram.org')
            self.log_message("–ù–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –¥–æ–π–¥–∏—Ç–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", "BROWSER")
            self.stop_thread = threading.Event()
            threshold = float(self.price_threshold.get())
            min_price = self.min_price_filter.get()
            gift_elem_number = self.gift_elem_number_filter.get()
            use_absolute = self.use_absolute_threshold.get()
            absolute_threshold = float(self.absolute_threshold.get()) if use_absolute else 0
            gift_selector = 'div.G1mBmzxs.f5ArEO1S.starGiftItem'
            chat_id = self.chat_id_var.get().strip() or None
            self.bot_thread = threading.Thread(target=self.run_bot, args=(threshold, gift_elem_number, min_price, gift_selector, use_absolute, absolute_threshold, chat_id))
            self.bot_thread.daemon = True
            self.bot_thread.start()
            self.is_running = True
            self.stage = 'automation'
            self.update_buttons_state()
            self.log_message("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ Telegram Web –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'", "INFO")
            return
        try:
            self.log_message("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±—Ä–∞—É–∑–µ—Ä–∞...", "BROWSER")
            self.driver.quit()
            self.driver = webdriver.Firefox()
            self.driver.maximize_window()
            self.driver.get('https://web.telegram.org')
            self.log_message("–ù–æ–≤—ã–π –±—Ä–∞—É–∑–µ—Ä –∑–∞–ø—É—â–µ–Ω. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∏ –¥–æ–π–¥–∏—Ç–µ –¥–æ –Ω—É–∂–Ω–æ–≥–æ –º–µ—Å—Ç–∞", "BROWSER")
            self.update_buttons_state()
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞: {e}", "ERROR")

    def load_chat_id_from_config(self):
        try:
            config = load_config()
            chat_id = config.get('telegram_chat_id', '')
            if chat_id:
                self.chat_id_var.set(str(chat_id))
                self.chat_id_status_var.set('‚úÖ Chat ID –ø–æ–ª—É—á–µ–Ω')
            else:
                self.chat_id_var.set('')
                self.chat_id_status_var.set('‚ùå Chat ID –Ω–µ –∑–∞–¥–∞–Ω')
        except Exception as e:
            self.chat_id_var.set('')
            self.chat_id_status_var.set(f'–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}')

    def save_chat_id_to_config(self):
        try:
            config = load_config()
            config['telegram_chat_id'] = self.chat_id_var.get().strip()
            save_config(config)
            self.chat_id_status_var.set('‚úÖ Chat ID —Å–æ—Ö—Ä–∞–Ω—ë–Ω')
        except Exception as e:
            self.chat_id_status_var.set(f'–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}')

    def get_chat_id_from_telegram(self):
        try:
            token = load_config().get('telegram_bot_token')
            if not token:
                self.chat_id_status_var.set('‚ùå –ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!')
                return
            
            send_telegram_notification('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /get_chat_id —ç—Ç–æ–º—É –±–æ—Ç—É –≤ Telegram, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à Chat ID.')
            self.chat_id_status_var.set('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
            
            url = f'https://api.telegram.org/bot{token}/getUpdates'
            for _ in range(10):
                resp = requests.get(url, timeout=5)
                if resp.ok:
                    data = resp.json()
                    if 'result' in data:
                        for update in reversed(data['result']):
                            msg = update.get('message')
                            if msg and 'text' in msg and msg['text'] == '/get_chat_id':
                                chat_id = msg['chat']['id']
                                self.chat_id_var.set(str(chat_id))
                                self.save_chat_id_to_config()
                                self.chat_id_status_var.set('‚úÖ Chat ID –ø–æ–ª—É—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏')
                                return
                time.sleep(2)
            self.chat_id_status_var.set('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å Chat ID. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ /get_chat_id –±–æ—Ç—É.')
        except Exception as e:
            self.chat_id_status_var.set(f'–û—à–∏–±–∫–∞: {e}')

if __name__ == "__main__":
    app = GiftBotGUI()
    app.run() 